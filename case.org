# -*- mode: org; org-confirm-babel-evaluate: nil -*-

#+TITLE: Incompact3D Case Definition: Taylor-Green Vortex
#+AUTHOR: Paul Bartholomew

#+STARTUP: inlineimages
#+OPTIONS: toc:nil

#+LATEX_CLASS_OPTIONS: [a4paper, 10pt]
#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \fvset{fontsize=\footnotesize}
#+LATEX_HEADER: \RecustomVerbatimEnvironment{verbatim}{Verbatim}{xleftmargin=5mm, samepage=true}
#+LATEX_HEADER: \hypersetup{colorlinks, linkcolor=red, urlcolor=blue}

#+BEGIN_ABSTRACT
This document is the case definition file for Incompact3D, it is a literate program written in Emacs
org-mode and is intended simplify access to user-facing aspects of the Incompact3D Navier-Stokes
solver.
To setup a case, edit this document as appropriate - for example change the size of the mesh by
editing the numbers in mesh size - then run ~make tangle~ to ``tangle'' these changes into the
Incompact3D source code, followed by ~make build~ to compile these changes.

*N.B.* This is not intended to document Incompact3D itself but the setup of a case in the hope of
 facilitating reproducibility of the simulation.
The user is encouraged to write what they are simulating as part of this document.
#+END_ABSTRACT

#+TOC: headlines 3

* Introduction

This Incomapct3D case definition file is for simulating a 3D Taylor-Green vortex.

** Case description

* Preprocessing

** Basic configuration

*** Name

Here you can name the case:

#+NAME: name
#+BEGIN_SRC text
# - 3D Taylor-Green Vortex -
#+END_SRC

*** Domain

**** Size

Here you can define the domain, variables:
- ~xlx~: ~float~ the extent of the domain in the x-direction
- ~yly~: ~float~ the extent of the domain in the y-direction
- ~zlz~: ~float~ the extent of the domain in the z-direction

#+NAME: domain
#+BEGIN_SRC text
6.28    # xlx
6.28    # yly
6.28    # zlz
#+END_SRC

**** Decomposition

Here you can specify the domain decomposition, variables:
- ~p_row~: ~int~
- ~p_col~: ~int~
setting both to zero will have Incompact3D try to determine the ideal decomposition automatically.

#+NAME: decomp
#+BEGIN_SRC text
0 # p_row
0 # p_col
#+END_SRC

#+BEGIN_LATEX
  \pagebreak
#+END_LATEX

*** Mesh

Here you can define the mesh parameters, variables are:
- ~nx~: ~int~ number of nodes in x direction
- ~ny~: ~int~ number of nodes in y direction
- ~nz~: ~int~ number of nodes in z direction
- ~istret~: ~int~ y mesh refinement
  - 0: no refinement
  - 1: centre
  - 2: both
  - 3: bottom
- ~beta~: ~float~ stretching parameter

#+NAME: nnodes
#+BEGIN_SRC text
128    # nx
128    # ny
128    # nz
#+END_SRC

#+NAME: stretching
#+BEGIN_SRC text
0    # istret
0.0  # beta
#+END_SRC
*** Fluid

#+NAME: fluid
#+BEGIN_SRC text :noweb yes :exports none
  #
  # Incompact 3D Fluid
  #
  <<fluid_prop>>
#+END_SRC

**** Properties

#+NAME: fluid_prop
#+BEGIN_SRC text
5000.0  # Reynolds number
#+END_SRC

**** Fluid initialisation

In this section we initialise the flow field by specifying an underlying turbulent field to which a
mean/deterministic field is added.
Before we can do this, we need to create the variables we are going to use for this function.

We need to declare the space used by our velocity arrays ~ux1, uy1, uz1~ in addition to: ~INTEGER :: i,
j, k~ for looping and ~REAL :: x, y, z~ for positions, note ~IMPLICIT NONE~ is set to ensure variables
are not implicitly created.

#+NAME: fluid_initvars
#+BEGIN_SRC f90
  REAL(mytype), DIMENSION(xsize(1), xsize(2), xsize(3)) :: ux1, uy1, uz1
  REAL(mytype) :: x, y, z
  INTEGER :: i, j, k
#+END_SRC

The Taylor-Green vortex has no initial perturbation, therefore you do not need to do anything here.
However, for purpose of demonstration, an empty loop is created in which you could specify a
perturbation of the initial field.

#+NAME: fluid_fluctinit
#+BEGIN_SRC f90
  DO k = 1, xsize(3)
     DO j = 1, xsize(2)
        DO i = 1, xsize(1)
        ENDDO
     ENDDO
  ENDDO
#+END_SRC

Here we setup the actual initial field which is given as
#+BEGIN_LATEX
  \begin{equation}
    \boldsymbol{u} \left( x, y, z \right) =
    \begin{pmatrix}
      sin \left( x \right) cos \left( y \right) cos \left( z \right) \\
      -cos \left( x \right) sin \left( y \right) cos \left( z \right) \\
      0
    \end{pmatrix}
  \end{equation}
#+END_LATEX
translated into code:
#+NAME: fluid_init
#+BEGIN_SRC f90
  DO k = 1, xsize(3)
     z = REAL((k + xstart(3) - 2), mytype) * dz
     DO j = 1, xsize(2)
        y = REAL((j + xstart(2) - 2), mytype) * dy
        DO i = 1, xsize(1)
           x = REAL(i - 1, mytype) * dx
           
           ux1(i, j, k) = +SIN(x) * COS(y) * COS(z)
           uy1(i, j, k) = -COS(x) * SIN(y) * COS(z)
           uz1(i, j, k) = zero
        ENDDO
     ENDDO
  ENDDO
#+END_SRC

The resulting user initialisation is:
#+NAME: fluid_userinit
#+BEGIN_SRC f90 :noweb yes :tangle case/fluid_userinit.inc
  !!                     -*- mode: f90 -*-
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !! F90 include file generated by case.org
  !!  
  !!                 -- DO NOT EDIT DIRECTLY --  
  !!  
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  USE decomp_2d
  USE param
  USE variables

  IMPLICIT NONE

  <<fluid_initvars>>

  !! Setup fluctuations
  <<fluid_fluctinit>>

  !! Setup mean field
  <<fluid_init>>
#+END_SRC

*** Boundary conditions

**** Boundary types

**** Boundary functions

*** Scalar

#+NAME: scalar
#+BEGIN_SRC text :noeweb yes :exports none
  #
  # Incompact 3D Scalar
  #
  <<nscalar>>
#+END_SRC

#+NAME: nscalar
#+BEGIN_SRC text
  0 # nscalar
#+END_SRC

*** Time integration

#+NAME: time
#+BEGIN_SRC text
0.0005 # dt
1      # nscheme
40000  # ilast
#+END_SRC

*** Turbulence model

Incompact3D is run as either a =DNS= code, or with =LES= modelling of turbulence.
Here, the user can specify the turbulence model by setting the value of the variable ~jLES~, accepted
values are:
- 0: no model (=DNS=)
- 1: iLES (implicit =LES=)
- 2: Explicit simple Smagorinsky
- 3: Explicit wall-adaptive =LES=
- 4: Explicit dynamic Smagorinsky =LES=

#+NAME: turb_model
#+BEGIN_SRC text
  0 # jLES
#+END_SRC

** Advanced configuration

*** Numerics
**** Numerical dissipation

Here you can set the options for numerical dissipation, variables are:
- ~npi2~: ~float~

#+NAME: dissipation
#+BEGIN_SRC text
4.0 # npi2
#+END_SRC

#+BEGIN_LATEX
  \pagebreak
#+END_LATEX
**** Order of Accuracy
*** Compiler directives

#+NAME: defs
#+BEGIN_SRC makefile
  DEFS = -DVISU -DVISUEXTRA -DDOUBLE_PREC -DVERSION=\"$(GIT_VERSION)\"

  LCL = local# local,lad,sdu,archer
  IVER = 17# 15,16,17,18
  CMP = gcc# intel,gcc
  FFT = generic# mkl,generic,fftw3
#+END_SRC

Here you might want to set per-case directives
#+NAME: defs_case
#+BEGIN_SRC makefile
  #######Case defs###########
  DEFS2 = -DPOST
#+END_SRC

# Build the case specific Makefile
#+BEGIN_SRC makefile :noweb yes :exports none :tangle case/Makefile
  <<defs>>

  <<defs_case>>
#+END_SRC
** incompact3d.prm
# This code-block generates the file ~incompact3d.prm~ - hopefully you won't have to edit it.

The generated incompact3d.prm is:

#+NAME: incompact3d.prm
#+BEGIN_SRC text :noweb yes :tangle incompact3d.prm
  ##############################################################
  #
  # INCOMPACT 3D parameters - Generated by Incompact3D case.org
  #
  ##############################################################
  #
  # Domain + mesh
  #
  <<domain>>
  <<nnodes>>
  <<stretching>>
  <<decomp>>
  <<fluid>>
  <<scalar>>
  <<numerics>>
  <<run>>
#+END_SRC

#+NAME: numerics
#+BEGIN_SRC text :noweb yes :exports none
#
# Incompact 3D Numerics
#
<<time>>
<<turb_model>>
<<dissipation>>
#+END_SRC

#+NAME: gred
#+BEGIN_SRC text :noweb yes :exports none
  #
  # Incompact 3D Domain + Mesh
  #
  <<domain>>
  <<nnodes>>
  <<stretching>>
  <<decomp>>
#+END_SRC

#+BEGIN_LATEX
  \pagebreak
#+END_LATEX

** Source Code                                                    :noexport:

This section contains the source code to be tangled into Incompact3D - it should not generally be edited.

* Postprocessing
